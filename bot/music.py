import discord
from discord import app_commands, ui, ButtonStyle
from discord.ext import commands
import wavelink
import traceback
from typing import Optional


class MusicControlView(ui.View):
    def __init__(self, ctx: commands.Context, player: wavelink.Player):
        super().__init__()
        self.ctx = ctx
        self.player = player
        self.timeout = 180.0

    @ui.button(label="‚è≠Ô∏è Skip", style=ButtonStyle.primary)
    async def skip_button(self, interaction: discord.Interaction, button: ui.Button):
        if not self.player.queue:
            await interaction.response.send_message("Kh√¥ng c√≤n b√†i h√°t trong h√†ng ƒë·ª£i.", ephemeral=True)
            return

        await self.player.stop()
        next_track = await self.player.queue.get_wait()
        await self.player.play(next_track)

        embed = discord.Embed(
            title="‚è≠Ô∏è B√†i h√°t ti·∫øp theo",
            description=f"**{next_track.title}** ƒë√£ ƒë∆∞·ª£c ph√°t",
            color=discord.Color.green()
        )
        await interaction.response.send_message(embed=embed)

    @ui.button(label="‚è∏Ô∏è Pause/Resume", style=ButtonStyle.secondary)
    async def pause_resume_button(self, interaction: discord.Interaction, button: ui.Button):
        if self.player.paused:
            await self.player.pause(False)
            await interaction.response.send_message("‚ñ∂Ô∏è Ti·∫øp t·ª•c ph√°t nh·∫°c", ephemeral=True)
        else:
            await self.player.pause(True)
            await interaction.response.send_message("‚è∏Ô∏è T·∫°m d·ª´ng ph√°t nh·∫°c", ephemeral=True)

    @ui.button(label="üîÅ L·∫∑p", style=ButtonStyle.green)
    async def loop_button(self, interaction: discord.Interaction, button: ui.Button):
        status = ''
        try:
            if self.player.queue.mode is not wavelink.QueueMode.loop:
                status = 'B·∫≠t'
                self.player.queue.mode = wavelink.QueueMode.loop
            else:
                status = 'T·∫Øt'
                self.player.queue.mode = wavelink.QueueMode.normal
        except Exception as e:
            status = 'L·ªói'
            print(f"L·ªói khi thay ƒë·ªïi ch·∫ø ƒë·ªô l·∫∑p: {e}")

        await interaction.response.send_message(f"üîÅ Ch·∫ø ƒë·ªô l·∫∑p: {status}", ephemeral=True)

    @ui.button(label="‚ùå D·ª´ng", style=ButtonStyle.red)
    async def stop_button(self, interaction: discord.Interaction, button: ui.Button):
        await self.player.disconnect()
        await interaction.response.send_message("üõë ƒê√£ d·ª´ng ph√°t nh·∫°c", ephemeral=True)
        self.stop()

    @ui.button(label="üîä √Çm l∆∞·ª£ng", style=ButtonStyle.secondary)
    async def volume_button(self, interaction: discord.Interaction, button: ui.Button):
        view = VolumeControlView(self.player)

        embed = discord.Embed(
            title="üîä ƒêi·ªÅu ch·ªânh √¢m l∆∞·ª£ng",
            description="Ch·ªçn m·ª©c √¢m l∆∞·ª£ng mong mu·ªën",
            color=discord.Color.blue()
        )

        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)


class VolumeControlView(ui.View):
    def __init__(self, player: wavelink.Player):
        super().__init__()
        self.player = player
        self.timeout = 60.0

    @ui.button(label="üîâ Gi·∫£m", style=ButtonStyle.primary)
    async def volume_down(self, interaction: discord.Interaction, button: ui.Button):
        current_volume = self.player.volume
        new_volume = max(0, current_volume - 10)
        await self.player.set_volume(new_volume)

        await interaction.response.send_message(
            f"üîä √Çm l∆∞·ª£ng ƒë√£ gi·∫£m xu·ªëng {new_volume}%",
            ephemeral=True
        )

    @ui.button(label="üîä TƒÉng", style=ButtonStyle.primary)
    async def volume_up(self, interaction: discord.Interaction, button: ui.Button):
        current_volume = self.player.volume
        new_volume = min(100, current_volume + 10)
        await self.player.set_volume(new_volume)

        await interaction.response.send_message(
            f"üîä √Çm l∆∞·ª£ng ƒë√£ tƒÉng l√™n {new_volume}%",
            ephemeral=True
        )


def setup_music_commands(bot: commands.Bot):
    @bot.tree.command(name="play", description="Ph√°t nh·∫°c t·ª´ YouTube")
    @app_commands.describe(query="T√™n b√†i h√°t ho·∫∑c link YouTube")
    async def play_music(interaction: discord.Interaction, query: str):
        if not interaction.user.voice:
            await interaction.response.send_message("B·∫°n ph·∫£i ·ªü trong voice channel!", ephemeral=True)
            return

        voice_channel = interaction.user.voice.channel

        if not wavelink.Pool.get_node():
            await interaction.response.send_message("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß √¢m nh·∫°c!", ephemeral=True)
            return

        try:
            tracks = await wavelink.Playable.search(query, source=None)

            if not tracks:
                await interaction.response.send_message("Kh√¥ng t√¨m th·∫•y b√†i h√°t!", ephemeral=True)
                return

            if len(tracks) > 1:
                view = TrackSelectionView(interaction.user, tracks)
                embed = discord.Embed(
                    title="üéµ Ch·ªçn b√†i h√°t",
                    description="Vui l√≤ng ch·ªçn m·ªôt b√†i h√°t t·ª´ danh s√°ch:",
                    color=discord.Color.blue()
                )

                for i, track in enumerate(tracks[:5], 1):
                    embed.add_field(
                        name=f"{i}. {track.title}",
                        value=f"Ngh·ªá sƒ©: {track.author}",
                        inline=False
                    )

                await interaction.response.send_message(embed=embed, view=view)
                return

            track = tracks[0]

            try:
                player = await voice_channel.connect(cls=wavelink.Player)
            except discord.ClientException:
                player = wavelink.Pool.get_node().get_player(interaction.guild.id)

            await player.queue.put_wait(track)

            if not player.playing:
                await player.play(player.queue.get(), volume=30)

            view = MusicControlView(interaction, player)

            embed = discord.Embed(
                title="üéµ ƒêang ph√°t nh·∫°c",
                description=f"ƒê√£ th√™m **{track.title}** v√†o danh s√°ch ph√°t",
                color=discord.Color.green()
            )
            embed.add_field(name="Ngh·ªá sƒ©", value=track.author, inline=True)
            embed.add_field(name="Th·ªùi l∆∞·ª£ng", value=f"{
                            track.length/1000:.2f} gi√¢y", inline=True)

            await interaction.response.send_message(embed=embed, view=view)

        except Exception as e:
            traceback.print_exc()
            await interaction.response.send_message(f"L·ªói: {str(e)}", ephemeral=True)

    class TrackSelectionView(ui.View):
        def __init__(self, user: discord.User, tracks: list):
            super().__init__()
            self.user = user
            self.tracks = tracks
            self.timeout = 60.0

        async def interaction_check(self, interaction: discord.Interaction) -> bool:
            return interaction.user == self.user

        @ui.button(label="1Ô∏è‚É£", style=ButtonStyle.primary)
        async def select_first(self, interaction: discord.Interaction, button: ui.Button):
            await self.play_selected_track(interaction, 0)

        @ui.button(label="2Ô∏è‚É£", style=ButtonStyle.primary)
        async def select_second(self, interaction: discord.Interaction, button: ui.Button):
            await self.play_selected_track(interaction, 1)

        @ui.button(label="3Ô∏è‚É£", style=ButtonStyle.primary)
        async def select_third(self, interaction: discord.Interaction, button: ui.Button):
            await self.play_selected_track(interaction, 2)

        @ui.button(label="4Ô∏è‚É£", style=ButtonStyle.primary)
        async def select_fourth(self, interaction: discord.Interaction, button: ui.Button):
            await self.play_selected_track(interaction, 3)

        @ui.button(label="5Ô∏è‚É£", style=ButtonStyle.primary)
        async def select_fifth(self, interaction: discord.Interaction, button: ui.Button):
            await self.play_selected_track(interaction, 4)

        async def play_selected_track(self, interaction: discord.Interaction, index: int):
            try:
                voice_channel = interaction.user.voice.channel
                track = self.tracks[index]

                player = await voice_channel.connect(cls=wavelink.Player)

                await player.queue.put_wait(track)

                if not player.playing:
                    await player.play(player.queue.get(), volume=50)

                view = MusicControlView(interaction, player)

                embed = discord.Embed(
                    title="üéµ ƒêang ph√°t nh·∫°c",
                    description=f"ƒê√£ ch·ªçn v√† ph√°t **{track.title}**",
                    color=discord.Color.green()
                )
                embed.add_field(
                    name="Ngh·ªá sƒ©", value=track.author, inline=True)
                embed.add_field(name="Th·ªùi l∆∞·ª£ng", value=f"{
                                track.length/1000:.2f} gi√¢y", inline=True)

                await interaction.response.send_message(embed=embed, view=view)

                self.stop()

            except Exception as e:
                traceback.print_exc()
                await interaction.response.send_message(f"L·ªói: {str(e)}", ephemeral=True)

    @bot.tree.command(name="queue", description="Hi·ªÉn th·ªã danh s√°ch ph√°t")
    async def show_queue(interaction: discord.Interaction):
        player = wavelink.Pool.get_node().get_player(interaction.guild_id)

        if not player or not player.queue:
            await interaction.response.send_message("Kh√¥ng c√≥ b√†i h√°t trong h√†ng ƒë·ª£i.", ephemeral=True)
            return

        embed = discord.Embed(title="üéµ Danh s√°ch ph√°t",
                              color=discord.Color.blue())

        if player.current:
            embed.description = f"**ƒêang ph√°t:** {player.current.title}"

        for i, track in enumerate(list(player.queue)[:10], 1):
            embed.add_field(
                name=f"{i}. {track.title}",
                value=f"Ngh·ªá sƒ©: {track.author}",
                inline=False
            )

        await interaction.response.send_message(embed=embed)

    @bot.tree.command(name="stop", description="D·ª´ng ph√°t nh·∫°c")
    async def stop_music(interaction: discord.Interaction):
        player = wavelink.Pool.get_node().get_player(interaction.guild_id)

        if not player:
            await interaction.response.send_message("Bot kh√¥ng ·ªü trong voice channel!", ephemeral=True)
            return

        await player.disconnect()
        await interaction.response.send_message("üõë ƒê√£ d·ª´ng ph√°t nh·∫°c v√† r·ªùi kh·ªèi voice channel", ephemeral=True)

    @bot.tree.command(name="volume", description="ƒêi·ªÅu ch·ªânh √¢m l∆∞·ª£ng ph√°t nh·∫°c")
    @app_commands.describe(
        volume="M·ª©c √¢m l∆∞·ª£ng t·ª´ 0-100 (%)"
    )
    async def set_volume(
        interaction: discord.Interaction,
        volume: app_commands.Range[int, 0, 100]
    ):
        """ƒêi·ªÅu ch·ªânh √¢m l∆∞·ª£ng ph√°t nh·∫°c"""
        player = wavelink.Pool.get_node().get_player(interaction.guild_id)

        if not player:
            await interaction.response.send_message(
                "Bot kh√¥ng ·ªü trong voice channel!",
                ephemeral=True
            )
            return

        try:
            await player.set_volume(volume)

            embed = discord.Embed(
                title="üîä ƒêi·ªÅu ch·ªânh √¢m l∆∞·ª£ng",
                description=f"ƒê√£ ƒë·∫∑t √¢m l∆∞·ª£ng th√†nh {volume}%",
                color=discord.Color.green()
            )

            await interaction.response.send_message(embed=embed)

        except Exception as e:
            await interaction.response.send_message(
                f"L·ªói khi ƒëi·ªÅu ch·ªânh √¢m l∆∞·ª£ng: {str(e)}",
                ephemeral=True
            )

    @bot.tree.command(name="current-volume", description="Ki·ªÉm tra √¢m l∆∞·ª£ng hi·ªán t·∫°i")
    async def get_current_volume(interaction: discord.Interaction):
        """Hi·ªÉn th·ªã √¢m l∆∞·ª£ng hi·ªán t·∫°i"""
        player = wavelink.Pool.get_node().get_player(interaction.guild_id)

        if not player:
            await interaction.response.send_message(
                "Bot kh√¥ng ·ªü trong voice channel!",
                ephemeral=True
            )
            return

        current_volume = player.volume

        embed = discord.Embed(
            title="üîä √Çm l∆∞·ª£ng hi·ªán t·∫°i",
            description=f"√Çm l∆∞·ª£ng ƒëang ƒë∆∞·ª£c ƒë·∫∑t ·ªü m·ª©c {current_volume}%",
            color=discord.Color.blue()
        )

        await interaction.response.send_message(embed=embed)
